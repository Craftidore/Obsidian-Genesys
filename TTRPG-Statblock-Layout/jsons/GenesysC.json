{"blocks":[{"type":"inline","id":"190a99da89c8","properties":[],"nested":[{"type":"group","id":"29f8ab38992b","properties":[],"nested":[{"type":"heading","id":"88b988282859","properties":["name"],"conditioned":false,"size":1,"fallback":"-"},{"type":"subheading","id":"29cb485a6aab","properties":["qty","type"],"conditioned":true,"fallback":"-","separator":" | "},{"type":"property","id":"6b0a29dafb9a","properties":["adversary"],"fallback":"-","display":"Adversary:","conditioned":true,"markdown":true}]}]},{"type":"javascript","id":"a889ebb84b0b","conditioned":false,"code":"let icons = {\n    \"soak\": 0x1F9FD,\n    \"wounds\": 0x1FA78,\n    \"strain\": 0x1F4A2,\n    \"rdef\": 0x1F3F9,\n    \"mdef\": 0x1F6E1,\n    \"def\": 0x1F6E1,\n  };\n  \n  let names = {\n  \"soak\": \"Soak\",\n  \"wounds\": \"Wounds\",\n  \"strain\": \"Strain\",\n  \"rdef\": \"Ranged Def\",\n  \"mdef\": \"Melee Def\",\n  \"def\": \"Defense\",\n  };\n  \n  let difficulties = {\n    \"simple\": 0,\n    \"easy\": 1,\n    \"average\": 2,\n    \"hard\": 3,\n    \"daunting\": 4,\n    \"formidable\": 5\n  };\n  \n  let diceprofIcon = \"#Proficiency\"\n  let diceabilityIcon = \"#Ability\"\n  let skillValues = [];\n  let characteristicsValues = [];\n  \n  //Add skillValues.push() here\n  skillValues.push(monster.astrogation, monster.athletics, monster.brawl, monster.charm, monster.coercion, monster.computers, monster.cool, monster.coordination, monster.cybernetics, monster.deception, monster.discipline, monster.gunnery, monster.coreworlds, monster.education, monster.lore, monster.outerrim, monster.underworld, monster.warfare, monster.xenology, monster.leadership, monster.lightsaber, monster.mechanics, monster.medicine, monster.melee, monster.negotiation, monster.perception, monster.pilotingplanetary,monster.pilotingspace, monster.rangedheavy, monster.rangedlight, monster.resilience, monster.skulduggery, monster.stealth, monster.streetwise, monster.survival, monster.vigilance);\n  //Add characteristicsValues.push() here\n  characteristicsValues.push(monster.stats[2], monster.stats[0], monster.stats[0], monster.stats[5], monster.stats[4], monster.stats[2], monster.stats[5], monster.stats[1], monster.stats[2], monster.stats[3], monster.stats[4], monster.stats[1], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[5], monster.stats[0], monster.stats[2], monster.stats[2], monster.stats[0], monster.stats[5], monster.stats[3], monster.stats[1], monster.stats[1], monster.stats[1], monster.stats[1], monster.stats[0], monster.stats[3], monster.stats[1], monster.stats[3], monster.stats[3], monster.stats[4]);\n  //Add skillLabels = here\n  let skillLabels = [\"Astro\", \"Athletics\", \"Brawl\", \"Charm\", \"Coercion\", \"Computers\", \"Cool\", \"Coordinat.\", \"Cybernet.\", \"Deception\", \"Discipline\", \"Gunnery\", \"K/Core\", \"K/Educ\", \"K/Lore\", \"K/OuterRim\", \"K/Underw.\", \"K/Warfare\", \"K/Xeno\", \"Leadership\", \"Lightsaber\", \"Mechanics\", \"Medicine\", \"Melee\", \"Negotiat.\", \"Perception\", \"P/Planet\", \"P/Space\", \"R/Heavy\", \"R/Light\", \"Resilience\", \"Skuldugg.\", \"Stealth\", \"Streetwise\", \"Survival\", \"Vigilance\"];\n  \n  //Initial Parralell Array Declarations\n  let presentSkillsArray = [];\n  let presentCharacteristicsArray = [];\n  let presentLabelsArray = [];\n  let dicepoolArray = [];\n  let rollerArray = [];\n  \n  let currentDifficulty = \"easy\";\n  let currentSetbacks = 0;\n  let currentBoosts = 0;\n  \n  // Boost 1\n  let boost1Button = document.createElement('button');\n  boost1Button.dataset.genesys = \"#Boost1\";\n  boost1Button.addEventListener('click', () => {\n            \n    if  (currentBoosts == 1) {\n            currentBoosts = 0\n            boost1Button.style.background = 'none';\n            }\n        else {\n            currentBoosts = 1\n            boost1Button.style.background = 'darkgrey';\n        }\n    \n        boost2Button.style.background = 'none';\n        boost3Button.style.background = 'none';\n        // Loop through all stored update functions and call them\n        statUpdateFunctions.forEach(updateFunc => {\n            updateFunc(); // Call each stat's update method\n        });\n  });\n\n    // Boost 2\n    let boost2Button = document.createElement('button');\n    boost2Button.dataset.genesys = \"#Boost1\";\n    boost2Button.addEventListener('click', () => {\n        currentBoosts = 2;\n        boost1Button.style.background = 'darkgrey';\n        boost2Button.style.background = 'darkgrey';\n        boost3Button.style.background = 'none';\n        // Loop through all stored update functions and call them\n        statUpdateFunctions.forEach(updateFunc => {\n            updateFunc(); // Call each stat's update method\n        });\n    });\n\n  // Boost 3\n  let boost3Button = document.createElement('button');\n  boost3Button.dataset.genesys = \"#Boost1\";\n  boost3Button.addEventListener('click', () => {\n        currentBoosts = 3;   \n        boost1Button.style.background = 'darkgrey';\n        boost2Button.style.background = 'darkgrey';\n        boost3Button.style.background = 'darkgrey';\n        // Loop through all stored update functions and call them\n        statUpdateFunctions.forEach(updateFunc => {\n            updateFunc(); // Call each stat's update method\n        });\n  });\n\n    // Setback 1\n    let setback1Button = document.createElement('button');\n    setback1Button.dataset.genesys = \"#Setback1\";\n    setback1Button.addEventListener('click', () => {\n              \n      if  (currentSetbacks == 1) {\n              currentSetbacks = 0\n              setback1Button.style.background = 'none';\n              }\n          else {\n              currentSetbacks = 1\n              setback1Button.style.background = 'darkgrey';\n          }\n      \n          setback2Button.style.background = 'none';\n          setback3Button.style.background = 'none';\n          // Loop through all stored update functions and call them\n          statUpdateFunctions.forEach(updateFunc => {\n              updateFunc(); // Call each stat's update method\n          });\n    });\n  \n      // Setback 2\n      let setback2Button = document.createElement('button');\n      setback2Button.dataset.genesys = \"#Setback1\";\n      setback2Button.addEventListener('click', () => {\n          currentSetbacks = 2;\n          setback1Button.style.background = 'darkgrey';\n          setback2Button.style.background = 'darkgrey';\n          setback3Button.style.background = 'none';\n          // Loop through all stored update functions and call them\n          statUpdateFunctions.forEach(updateFunc => {\n              updateFunc(); // Call each stat's update method\n          });\n      });\n  \n    // Setback 3\n    let setback3Button = document.createElement('button');\n    setback3Button.dataset.genesys = \"#Setback1\";\n    setback3Button.addEventListener('click', () => {\n          currentSetbacks = 3;   \n          setback1Button.style.background = 'darkgrey';\n          setback2Button.style.background = 'darkgrey';\n          setback3Button.style.background = 'darkgrey';\n          // Loop through all stored update functions and call them\n          statUpdateFunctions.forEach(updateFunc => {\n              updateFunc(); // Call each stat's update method\n          });\n    });\n\n  // Easy Button\n  let easyButton = document.createElement('button');\n    easyButton.dataset.genesys = \"#Difficulty1\";\n  easyButton.addEventListener('click', () => {\n        if  (currentDifficulty == \"easy\") {\n            currentDifficulty = \"simple\"\n            easyButton.style.background = 'none';\n            }\n        else {\n            currentDifficulty = \"easy\"\n            easyButton.style.background = 'darkgrey';\n        }\n    \n        averageButton.style.background = 'none';\n        hardButton.style.background = 'none';\n        dauntingButton.style.background = 'none';\n        formidableButton.style.background = 'none';\n        // Loop through all stored update functions and call them\n        statUpdateFunctions.forEach(updateFunc => {\n            updateFunc(); // Call each stat's update method\n        });\n  });\n  \n  // Average Button\n  let averageButton = document.createElement('button');\n  averageButton.dataset.genesys = \"#Difficulty1\";\n  averageButton.addEventListener('click', () => {\n        currentDifficulty = \"average\";\n        easyButton.style.background = 'darkgrey';\n        averageButton.style.background = 'darkgrey';\n        hardButton.style.background = 'none';\n        dauntingButton.style.background = 'none';\n        formidableButton.style.background = 'none';\n        // Loop through all stored update functions and call them\n        statUpdateFunctions.forEach(updateFunc => {\n            updateFunc(); // Call each stat's update method\n        });\n  });\n  \n  // Hard Button\n  let hardButton = document.createElement('button');\n  hardButton.dataset.genesys = \"#Difficulty1\";\n  hardButton.addEventListener('click', () => {\n        currentDifficulty = \"hard\";\n        easyButton.style.background = 'darkgrey';\n        averageButton.style.background = 'darkgrey';\n        hardButton.style.background = 'darkgrey';\n        dauntingButton.style.background = 'none';\n        formidableButton.style.background = 'none';\n        // Loop through all stored update functions and call them\n        statUpdateFunctions.forEach(updateFunc => {\n        updateFunc(); // Call each stat's update method\n    });\n  });\n\n    // Daunting Button\n    let dauntingButton = document.createElement('button');\n    dauntingButton.dataset.genesys = \"#Difficulty1\";\n    dauntingButton.addEventListener('click', () => {\n          currentDifficulty = \"daunting\";\n          easyButton.style.background = 'darkgrey';\n          averageButton.style.background = 'darkgrey';\n          hardButton.style.background = 'darkgrey';\n          dauntingButton.style.background = 'darkgrey';\n          formidableButton.style.background = 'none';\n          // Loop through all stored update functions and call them\n          statUpdateFunctions.forEach(updateFunc => {\n          updateFunc(); // Call each stat's update method\n      });\n    });\n\n    // Formidable Button\n    let formidableButton = document.createElement('button');\n    formidableButton.dataset.genesys = \"#Difficulty1\";\n    formidableButton.addEventListener('click', () => {\n            currentDifficulty = \"formidable\";\n            easyButton.style.background = 'darkgrey';\n            averageButton.style.background = 'darkgrey';\n            hardButton.style.background = 'darkgrey';\n            dauntingButton.style.background = 'darkgrey';\n            formidableButton.style.background = 'darkgrey';\n            // Loop through all stored update functions and call them\n            statUpdateFunctions.forEach(updateFunc => {\n            updateFunc(); // Call each stat's update method\n        });\n    });\n\n  // Add buttons to a container div\n  let diceButtons = document.createElement('div');\n  diceButtons.id = \"div_diceButtons\";\n  \n  // Append buttons to the container div\n  diceButtons.appendChild(easyButton);\n  diceButtons.appendChild(averageButton);\n  diceButtons.appendChild(hardButton);\n  diceButtons.appendChild(dauntingButton);\n  diceButtons.appendChild(formidableButton);\n  diceButtons.appendChild(boost1Button);\n  diceButtons.appendChild(boost2Button);\n  diceButtons.appendChild(boost3Button);\n  diceButtons.appendChild(setback1Button);\n  diceButtons.appendChild(setback2Button);\n  diceButtons.appendChild(setback3Button);\n\n  //POPULATE PARALLEL ARRAYS\n  function populateArrays() {\n    for (let x = 0; x < skillValues.length; x++) {\n        let stat = skillValues[x];\n        let label = skillLabels[x];\n        let characteristic = characteristicsValues[x];\n        let dicepoolElement = document.createElement('span');\n        let qty = 0;\n    \n        // Skill level based on Qty if type minion\n        if (typeof stat !== \"undefined\" ) {\n            // Skill cap at 5 (qty 6)\n            if (monster.qty > 6) {\n            qty = 6\n            }\n            else {\n            qty = monster.qty\n            }\n            if  (monster.type == \"Minion\" || monster.type == 'minion') {\n            stat = qty-1;\n            }\n        \n            // Dice Pool Calculations\n            let ability = Math.max(stat, characteristic) - Math.min(stat, characteristic);\n            let prof = Math.min(stat, characteristic);\n            let diff = difficulties[currentDifficulty];\n            \n            //Div per Icon\n            const profdice = document.createElement('span');\n            const abilitydice = document.createElement('span');\n            profdice.dataset.genesys = diceprofIcon + prof;\n            abilitydice.dataset.genesys = diceabilityIcon + ability;\n            \n            //Declare DiceRoller API stuffs\n            const diceRollerPlugin = window.DiceRoller;\n        \n            addDice = async function (diceString, parent) {\n            const diceRoller = await diceRollerPlugin.getRoller(diceString);\n            const el = await diceRoller.containerEl;\n            parent.appendChild(el);\n            }\n            \n            const diceDiv = createEl('div');\n            diceDiv.id = \"div_dice\";\n            addDice(prof+\"y\"+ability+\"g\"+diff+\"d\"+currentBoosts+\"b\"+currentSetbacks+\"s\", diceDiv);\n        \n            // Add to Parallel Arrays\n            dicepoolElement.appendChild(profdice);\n            dicepoolElement.appendChild(abilitydice);\n            dicepoolArray.push(dicepoolElement);\n            presentSkillsArray.push(stat);\n            presentCharacteristicsArray.push(characteristic);\n            presentLabelsArray.push(label);\n            rollerArray.push(diceDiv);\n        }\n    }\n  }\n  \n  populateArrays();\n  \n    // Create an array to store update methods for each stat\n    let statUpdateFunctions = [];\n\n  //Stats (Wounds, Strain etc.) Calculation Function\n  function statWithIcon(targetStat) {\n  \n        //Definitions\n        let statValue = 0; //statValue starts at 0\n        let icon = String.fromCodePoint(icons[targetStat]);\n        let name = names[targetStat];\n        let nameElement = document.createElement('strong');\n        nameElement.id = \"div_stat\";\n        nameElement.textContent = name;\n        let iconElement = document.createElement('span');\n        iconElement.style.marginLeft = '5px';\n        let statElement = document.createElement('span');\n        statElement.id = \"span_stat\";\n    \n        //I do not know why this is here...\n        if (targetStat == undefined || (targetStat in monster === false && targetStat !== \"def\") ) {\n            return null;\n        }\n    \n        // Calculate Wounds based on QTY if MINION\n        if ((monster.type == \"Minion\" || monster.type == \"minion\") && names[targetStat] == \"Wounds\") {\n            statValue = monster[targetStat] * monster.qty;\n        } else {\n            statValue = monster[targetStat];\n        }\n    \n        // Handle rdef/mdef as a single object\n        if (targetStat == \"def\") {\n            let mdeficon = String.fromCodePoint(icons[\"mdef\"])\n            let rdeficon = String.fromCodePoint(icons[\"rdef\"])\n            statElement.textContent = monster[\"rdef\"] + \"\\u25CE\"+ \" | \" + monster[\"mdef\"] + \"\\uD83D\\uDEE1\";\n        } else {\n            statElement.textContent = statValue;\n        }\n    \n        function updateExistingContent() {\n            // Floor statValue at 1.\n            if (statValue < 1) {\n                statValue = 1;\n            }\n    \n            // Update statElement's text content\n            if (statElement) {\n                statElement.textContent = statValue;\n            } else {\n                console.error(\"statElement is not defined or not in the DOM.\");\n                return;\n            }\n    \n            // Check if the monster is a minion and the target stat is \"Wounds\"\n            //if ((monster.type === \"Minion\" || monster.type === \"minion\") && names[targetStat] === \"Wounds\") {\n            if (names[targetStat] === \"Wounds\") {\n                // Validate outputElement exists\n                if (!outputElement) {\n                    console.error(\"outputElement is not defined or not in the DOM.\");\n                    return;\n                }\n    \n                // Clear the children of outputElement after the \"tapered-rule\" element\n                let clearChildren = false;\n                Array.from(outputElement.children).forEach(child => {\n                    if (clearChildren) {\n                        child.remove();\n                    }\n                    if (child.classList.contains(\"tapered-rule\")) {\n                        clearChildren = true;\n                    }\n                });\n                \n                //Keep diceButtons at the top.\n                outputElement.appendChild(diceButtons);\n\n                // Update the dicepoolArray with new values based on the updated statValue\n                dicepoolArray.forEach((_, i) => {\n                    if ( monster.type === \"Minion\" || monster.type === \"minion\") {\n                        stat = Math.ceil(statValue / monster.wounds) - 1;\n                        stat = Math.min(stat, 5); // Cap stat at 5\n                    }\n                    else {\n                        stat = presentSkillsArray[i];\n                    }\n\n                    const characteristic = presentCharacteristicsArray[i];\n                    const ability = Math.max(stat, characteristic) - Math.min(stat, characteristic);\n                    const prof = Math.min(stat, characteristic);\n                    const diff = difficulties[currentDifficulty];\n                    \n                    // Create dice elements\n                    const profdice = document.createElement(\"span\");\n                    profdice.dataset.genesys = diceprofIcon + prof;\n    \n                    const abilitydice = document.createElement(\"span\");\n                    abilitydice.dataset.genesys = diceabilityIcon + ability;\n    \n                    //Declare DiceRoller API stuffs\n                    const diceRollerPlugin = window.DiceRoller;\n                \n                    addDice = async function (diceString, parent) {\n                        const diceRoller = await diceRollerPlugin.getRoller(diceString);\n                        const el = await diceRoller.containerEl;\n                        parent.appendChild(el);\n                    }\n                    \n                    const diceDiv = createEl('div');\n                    diceDiv.id = \"div_dice\";\n                    addDice(prof+\"y\"+ability+\"g\"+diff+\"d\"+currentBoosts+\"b\"+currentSetbacks+\"s\", diceDiv);\n    \n                    // Update the dicepoolArray with the new dice spans\n                    const poolElement = document.createElement(\"span\");\n                    poolElement.appendChild(profdice);\n                    poolElement.appendChild(abilitydice);\n                    dicepoolArray[i] = poolElement;\n                    rollerArray[i] = diceDiv;\n                });\n    \n                // Repopulate outputElement with updated dice pools and skills\n                presentSkillsArray.forEach((stat, x) => {\n                    const label = presentLabelsArray[x];\n                    const diceElement = dicepoolArray[x];\n                    const roller = rollerArray[x];\n    \n                    if (stat !== undefined) {\n                        const skillElement = document.createElement(\"strong\");\n                        skillElement.id = \"div_skillName\"\n                        skillElement.textContent = label;\n    \n                        const dicecontainerElement = document.createElement(\"div\");\n                        dicecontainerElement.id = \"div_dicecontainer\";\n                        dicecontainerElement.appendChild(skillElement);\n                        //dicecontainerElement.appendChild(document.createTextNode(\": \"));\n                        dicecontainerElement.appendChild(diceElement);\n                        dicecontainerElement.appendChild(roller);\n                        dicecontainerElement.appendChild(document.createElement(\"br\"));\n\n                        outputElement.appendChild(dicecontainerElement);\n                    }\n                });\n            }\n        }\n    \n        // Store the update method for this stat\n        statUpdateFunctions.push(updateExistingContent);\n\n        //DECREMENT BUTTON\n        let decrementButton = document.createElement('button');\n        decrementButton.id = \"decrementButton\"\n        decrementButton.textContent = '-';\n        decrementButton.addEventListener('click', () => {\n            statValue--;\n            updateExistingContent();\n        });\n    \n        //MULTIPLE DECREMENT BUTTON\n        let decrementWholeButton = document.createElement('button');\n        decrementWholeButton.id = \"decrementMulti\"\n        decrementWholeButton.textContent = '-'+monster.wounds;\n        decrementWholeButton.addEventListener('click', () => {\n        statValue = statValue-monster.wounds;\n        updateExistingContent();\n        });\n    \n        //INCREMENT BUTTON\n        let incrementButton = document.createElement('button');\n        incrementButton.id = \"incrementButton\"\n        incrementButton.textContent = '+';\n        incrementButton.addEventListener('click', () => {\n            statValue++;\n            updateExistingContent();\n        });\n    \n        //MULTIPLE INCREMENT BUTTON\n        let incrementWholeButton = document.createElement('button');\n        incrementWholeButton.id = \"incrementMulti\"\n        incrementWholeButton.textContent = '+'+monster.wounds;\n        incrementWholeButton.addEventListener('click', () => {\n            statValue = statValue+monster.wounds;\n            updateExistingContent();\n        });\n        \n        //Build Individual Stat Rows\n        \n        //Create Individual Elements\n        let statcontainerElement = document.createElement('div');\n        statcontainerElement.id = \"div_statcontainer\";\n        let buttoncontainerElement = document.createElement('div');\n        buttoncontainerElement.id = \"div_button\";\n        let decreaseButtons = document.createElement('div');\n        decreaseButtons.id = \"decreasebuttons\"\n        let increaseButtons = document.createElement('div');\n        increaseButtons.id = \"increasebuttons\"\n    \n        statcontainerElement.appendChild(nameElement);\n        if ((targetStat == \"wounds\" || targetStat == \"strain\") && (monster.type == \"Minion\" || monster.type == 'minion')) {\n            decreaseButtons.appendChild(decrementWholeButton);\n            decreaseButtons.appendChild(decrementButton);\n            buttoncontainerElement.appendChild(decreaseButtons);\n        }\n        buttoncontainerElement.appendChild(statElement);\n        if ((targetStat == \"wounds\" || targetStat == \"strain\") && (monster.type == \"Minion\" || monster.type == 'minion')) {\n            increaseButtons.appendChild(incrementButton);\n            increaseButtons.appendChild(incrementWholeButton);\n            buttoncontainerElement.appendChild(increaseButtons);\n        }\n            statcontainerElement.appendChild(buttoncontainerElement);\n        \n        return statcontainerElement;\n  };\n  \n  // Create Containers & IDs (Individual containers for Styling purposes)\n  let outputElement = document.createElement('div');\n  outputElement.id = \"div_output\"\n  let allDicePoolsElement = document.createElement('div');\n  allDicePoolsElement.id = \"div_dicePools\";\n  let soakContainer = document.createElement('div');\n  soakContainer.id = \"div_soak\"\n  let woundsContainer = document.createElement('div');\n  woundsContainer.id = \"div_wounds\"\n  let strainContainer = document.createElement('div');\n  strainContainer.id = \"div_strain\"\n  let rdefMdefContainer = document.createElement('div');\n  rdefMdefContainer.id = \"div_rdefMdefContainer\"\n  \n  let allStatsContainer = document.createElement('div');\n  allStatsContainer.id = \"div_allstats\"\n  \n  // Render Stats into div\n  soakContainer.appendChild(statWithIcon(\"soak\"));\n  woundsContainer.appendChild(statWithIcon(\"wounds\"));\n  if (monster.type !== \"undefined\" && (monster.type !== \"Minion\" && monster.type !== \"minion\" && monster.type !== \"Rival\" && monster.type !== \"rival\")) {\n  strainContainer.appendChild(statWithIcon(\"strain\"));\n  }\n  rdefMdefContainer.appendChild(statWithIcon(\"def\"));\n  \n  allStatsContainer.appendChild(soakContainer);\n  allStatsContainer.appendChild(woundsContainer);\n  allStatsContainer.appendChild(strainContainer);\n  //If Defense is relevant, add to container\n  if (monster.rdef > 0 || monster.mdef > 0) {\n    allStatsContainer.appendChild(rdefMdefContainer);\n  }\n  \n  //Add the stats to the output\n  outputElement.appendChild(allStatsContainer);\n  \n  //Separate the stat/dice pool sections with a line.\n  let lineElement = document.createElement('div');\n  lineElement.id = \"div_line\"\n  lineElement.classList.add('tapered-rule');\n  outputElement.appendChild(lineElement);\n  outputElement.appendChild(diceButtons);\n  \n  // Render Dice Pools per Skill - If monster type is minion, exclude Skill level\n  for (let x = 0; x < presentSkillsArray.length; x++) {\n    let stat = presentSkillsArray[x];\n    let label = presentLabelsArray[x];\n    let roller = rollerArray[x];\n    if (typeof stat !== \"undefined\" ) {\n        let statElement = document.createElement('span');\n        statElement.textContent = '('+stat+')';\n        statElement.style.marginRight = '5px'; \n        let skillElement = document.createElement('strong');\n        skillElement.textContent = label;\n        let diceElement = document.createElement('span');\n        diceElement = dicepoolArray[x];\n  \n        let dicecontainerElement = document.createElement('div');\n        dicecontainerElement.id = \"div_dicecontainer\";\n        dicecontainerElement.appendChild(skillElement);\n  \n        if (monster.type !== \"Minion\" && monster.type !== \"minion\") {\n        //dicecontainerElement.appendChild(statElement);\n        }\n        dicecontainerElement.appendChild(diceElement);\n        dicecontainerElement.appendChild(roller);\n        dicecontainerElement.appendChild(document.createElement('br'));\n        allDicePoolsElement.appendChild(dicecontainerElement);\n  \n    }\n  }\n  \n  outputElement.appendChild(allDicePoolsElement);\n  return outputElement;\n  "},{"type":"inline","id":"5b98fbaa3af9","properties":[],"nested":[{"type":"group","id":"daba280b6ae8","properties":[],"nested":[{"type":"traits","id":"faeb3b193b9b","properties":["equipment"],"fallback":"-","conditioned":true,"markdown":true}]}]}],"name":"GenesysC","id":"f9f95988db59","diceParsing":[],"columns":1,"forceColumns":false,"columnWidth":500}