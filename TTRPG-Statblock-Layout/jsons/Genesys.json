{"blocks":[{"type":"image","id":"c8bae969e9bb","properties":["image"]},{"type":"inline","id":"e85988ba5b59","properties":[],"hasRule":false,"nested":[{"type":"group","id":"2b683b8b88c9","properties":["name","size","type","subtype","alignment"],"nested":[{"type":"heading","id":"88b988282859","properties":["name"],"conditioned":false,"size":1,"fallback":"-"},{"type":"subheading","id":"29cb485a6aab","properties":["qty","type"],"conditioned":true,"fallback":"-","separator":" |  ","diceCallback":"const text = monster.qty + \"x\"\nreturn text"},{"type":"property","id":"484b28db8a19","properties":["adversary"],"fallback":"-","display":"Adversary: ","markdown":true,"conditioned":true}],"conditioned":true}]},{"type":"property","id":"cb2b1bcbd988","properties":["desc"],"fallback":"-","display":"","conditioned":true,"markdown":true,"callback":"output = monster.desc.italics()\nreturn output\n","hasRule":true},{"type":"table","id":"ea9aa80b883b","properties":["stats"],"headers":["BRW","AGI","INT","CUN","WIL","PRE"],"calculate":false,"fallback":"-","conditioned":true,"hasRule":true},{"type":"group","id":"0bca997a9a48","properties":[],"nested":[{"type":"javascript","id":"88293bb89aca","conditioned":false,"code":"//Static Definitions\n\nlet icons = {\n  \"soak\": 0x1F9FD,\n  \"wounds\": 0x1FA78,\n  \"strain\": 0x1F4A2,\n  \"rdef\": 0x1F3F9,\n  \"mdef\": 0x1F6E1,\n  \"def\": 0x1F6E1,\n};\n\nlet names = {\n  \"soak\": \"Soak\",\n  \"wounds\": \"Wounds\",\n  \"strain\": \"Strain\",\n  \"rdef\": \"Ranged Def\",\n  \"mdef\": \"Melee Def\",\n  \"def\": \"Defense\",\n};\n\nlet diceprofIcon = \"#Proficiency\"\nlet diceabilityIcon = \"#Ability\"\nlet skillValues = [];\nlet characteristicsValues = [];\n\n//Add skillValues.push() here\nskillValues.push(monster.astrogation, monster.athletics, monster.brawl, monster.charm, monster.coercion, monster.computers, monster.cool, monster.coordination, monster.cybernetics, monster.deception, monster.discipline, monster.gunnery, monster.coreworlds, monster.education, monster.lore, monster.outerrim, monster.underworld, monster.warfare, monster.xenology, monster.leadership, monster.lightsaber, monster.mechanics, monster.medicine, monster.melee, monster.negotiation, monster.perception, monster.pilotingplanetary,monster.pilotingspace, monster.rangedheavy, monster.rangedlight, monster.resilience, monster.skulduggery, monster.stealth, monster.streetwise, monster.survival, monster.vigilance);\n//Add characteristicsValues.push() here\ncharacteristicsValues.push(monster.stats[2], monster.stats[0], monster.stats[0], monster.stats[5], monster.stats[4], monster.stats[2], monster.stats[5], monster.stats[1], monster.stats[2], monster.stats[3], monster.stats[4], monster.stats[1], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[2], monster.stats[5], monster.stats[0], monster.stats[2], monster.stats[2], monster.stats[0], monster.stats[5], monster.stats[3], monster.stats[1], monster.stats[1], monster.stats[1], monster.stats[1], monster.stats[0], monster.stats[3], monster.stats[1], monster.stats[3], monster.stats[3], monster.stats[4]);\n//Add skillLabels = here\nlet skillLabels = [\"Astrogation\", \"Athletics\", \"Brawl\", \"Charm\", \"Coercion\", \"Computers\", \"Cool\", \"Coordination\", \"Cybernetics\", \"Deception\", \"Discipline\", \"Gunnery\", \"Knw: Core Worlds\", \"Knw: Education\", \"Knw: Lore\", \"Knw: Outer Rim\", \"Knw: Underworld\", \"Knw: Warfare\", \"Knw: Xenology\", \"Leadership\", \"Lightsaber\", \"Mechanics\", \"Medicine\", \"Melee\", \"Negotiation\", \"Perception\", \"Piloting: Planetary\", \"Piloting: Space\", \"Ranged: Heavy\", \"Ranged: Light\", \"Resilience\", \"Skulduggery\", \"Stealth\", \"Streetwise\", \"Survival\", \"Vigilance\"];\n// Initial Dice Pools calculations.\n\nlet presentSkillsArray = [];\nlet presentCharacteristicsArray = [];\nlet presentLabelsArray = [];\nlet dicepoolArray = []; //initial Declaration\n\nfor (let x = 0; x < skillValues.length; x++) {\n  \n  let stat = skillValues[x];\n  let label = skillLabels[x];\n  let characteristic = characteristicsValues[x];\n  let dicepoolElement = document.createElement('span');\n  let qty = 0;\n\n  // Skill level based on Qty if type minion\n  if (typeof stat !== \"undefined\" ) { //&& (monster.type == \"Minion\" || monster.type == 'minion')\n    // Skill cap at 5 (qty 6)\n    if (monster.qty > 6) {\n      qty = 6\n    }\n    else {\n      qty = monster.qty\n    }\n    if  (monster.type == \"Minion\" || monster.type == 'minion') {\n      stat = qty-1;\n    }\n\n    // Dice Pool Calculations\n    let ability = Math.max(stat, characteristic) - Math.min(stat, characteristic);\n    let prof = Math.min(stat, characteristic);\n    \n    //Div per Icon\n    const profdice = document.createElement('span');\n    const abilitydice = document.createElement('span');\n    profdice.dataset.genesys = diceprofIcon + prof;\n    abilitydice.dataset.genesys = diceabilityIcon + ability;\n    \n    // Add to Parallel Arrays\n\n    dicepoolElement.appendChild(profdice);\n    dicepoolElement.appendChild(abilitydice);\n    dicepoolArray.push(dicepoolElement);\n    presentSkillsArray.push(stat);\n    presentCharacteristicsArray.push(characteristic);\n    presentLabelsArray.push(label);\n  }\n}\n\n//Stats (Wounds, Strain etc.) Calculation Function\n\nlet statWithIcon = (targetStat) => {\n  if (targetStat == undefined || (targetStat in monster === false && targetStat !== \"def\") ) {\n    return null;\n  }\n\n  let statValue = 0; //statValue starts at 0\n\n  // Stats based on QTY for Minions, or Level if not.\n  if ((monster.type == \"Minion\" || monster.type == \"minion\") && names[targetStat] == \"Wounds\") {\n    statValue = monster[targetStat] * monster.qty;\n  } else {\n    statValue = monster[targetStat];\n  }\n\n  let icon = String.fromCodePoint(icons[targetStat]);\n  let name = names[targetStat];\n\n  let nameElement = document.createElement('strong');\n  nameElement.id = \"div_stat\";\n  nameElement.textContent = name;\n\n  let iconElement = document.createElement('span');\n  //iconElement.textContent = icon;\n  iconElement.style.marginLeft = '5px';\n\n  let statElement = document.createElement('span');\n  statElement.id = \"span_stat\";\n  \n   // If to handle rdef/mdef differently (as a single object).\n  if (targetStat == \"def\") {\n    let mdeficon = String.fromCodePoint(icons[\"mdef\"])\n    let rdeficon = String.fromCodePoint(icons[\"rdef\"])\n    statElement.textContent = monster[\"rdef\"] + \"\\u25CE\"+ \" | \" + monster[\"mdef\"] + \"\\uD83D\\uDEE1\";\n  } else {\n    statElement.textContent = statValue;\n  }\n  \n  //statElement.textContent = statValue;\n\n//DECREMENT BUTTON\n  let decrementButton = document.createElement('button');\n  decrementButton.textContent = '-';\n  decrementButton.style.width = '15px'; // Set the width to 100 pixels\n  decrementButton.style.height = '15px'; // Set the height to 15 pixels\n  decrementButton.style.marginRight = '3px'; // Add right margin to create space\n  decrementButton.style.lineHeight = '1'; //Center the +/- vertically.\n  decrementButton.style.borderRadius = '20%';\n  decrementButton.addEventListener('click', () => {\n\n    statValue--;\n    //Floor statValue at 1\n    if (statValue < 1) {\n      statValue = 1\n    }\n    statElement.textContent = statValue;\n\n    if ((monster.type == \"Minion\" || monster.type == \"minion\") && names[targetStat] == \"Wounds\") {\n      \n      // Clear the children of outputElement after \"rdefMdefContainer\"\n      let clearChildren = false;\n      let childrenToRemove = [];\n\n      Array.from(outputElement.children).forEach(child => {\n        if (clearChildren) {\n          childrenToRemove.push(child);\n        }\n        if (child.classList.contains('tapered-rule')) {\n          clearChildren = true;\n        }\n      });\n\n      childrenToRemove.forEach(child => {\n        child.remove();\n      });\n\n      for (let i = 0; i < dicepoolArray.length; i++) {\n        let stat = Math.ceil(statValue / monster.wounds)-1;\n        //Cap Stat at 5\n        if ( stat > 5 ) {\n          stat = 5\n        }\n        let characteristic = presentCharacteristicsArray[i];\n        let ability = Math.max(stat, characteristic) - Math.min(stat, characteristic);\n        let prof = Math.min(stat, characteristic);\n        \n        //Put the Dice Quantities into a Span Property\n        const profdice = document.createElement('span');\n        const abilitydice = document.createElement('span');\n        profdice.dataset.genesys = diceprofIcon + prof;\n        abilitydice.dataset.genesys = diceabilityIcon + ability;\n\n        //Put the Span in an Array\n        let poolElement = document.createElement('span');\n        poolElement.appendChild(profdice);\n        poolElement.appendChild(abilitydice);\n        dicepoolArray[i] = poolElement;\n      }\n\n      // Repopulate outputElement with updated content\n      for (let x = 0; x < presentSkillsArray.length; x++) {\n        let stat = presentSkillsArray[x];\n        let label = presentLabelsArray[x];\n        let characteristic = presentCharacteristicsArray[x];\n\n        if (typeof stat !== \"undefined\" && (monster.type == \"Minion\" || monster.type == 'minion')) {\n          let skillElement = document.createElement('strong');\n          skillElement.textContent = label;\n          let diceElement = document.createElement('span');\n          diceElement = dicepoolArray[x];\n\n          let dicecontainerElement = document.createElement('div');\n          dicecontainerElement.id = \"div_dicecontainer\";\n          dicecontainerElement.appendChild(skillElement);\n          dicecontainerElement.appendChild(document.createTextNode(': '));\n          dicecontainerElement.appendChild(diceElement);\n          dicecontainerElement.appendChild(document.createElement('br'));\n\n          outputElement.appendChild(dicecontainerElement);\n      }\n    }\n\n\n  }\n});\n\n//MULTIPLE DECREMENT BUTTON\nlet decrementWholeButton = document.createElement('button');\ndecrementWholeButton.textContent = '-'+monster.wounds;\ndecrementWholeButton.style.width = '15px'; // Set the width to 100 pixels\ndecrementWholeButton.style.height = '15px'; // Set the height to 15 pixels\ndecrementWholeButton.style.marginRight = '3px'; // Add right margin to create space\ndecrementWholeButton.style.marginLeft = '3px'; // Add right margin to create space\ndecrementWholeButton.style.lineHeight = '1'; //Center the +/- vertically.\ndecrementWholeButton.style.borderRadius = '20%';\ndecrementWholeButton.addEventListener('click', () => {\n\n  statValue = statValue-monster.wounds;\n  //Floor statValue at 1\n  if (statValue < 1) {\n    statValue = 1\n  }\n  statElement.textContent = statValue;\n\n  if ((monster.type == \"Minion\" || monster.type == \"minion\") && names[targetStat] == \"Wounds\") {\n    \n    // Clear the children of outputElement after \"rdefMdefContainer\"\n    let clearChildren = false;\n    let childrenToRemove = [];\n\n    Array.from(outputElement.children).forEach(child => {\n      if (clearChildren) {\n        childrenToRemove.push(child);\n      }\n      if (child.classList.contains('tapered-rule')) {\n        clearChildren = true;\n      }\n    });\n\n    childrenToRemove.forEach(child => {\n      child.remove();\n    });\n\n    for (let i = 0; i < dicepoolArray.length; i++) {\n      let stat = Math.ceil(statValue / monster.wounds)-1;\n      //Cap Stat at 5\n      if ( stat > 5 ) {\n        stat = 5\n      }\n      let characteristic = presentCharacteristicsArray[i];\n      let ability = Math.max(stat, characteristic) - Math.min(stat, characteristic);\n      let prof = Math.min(stat, characteristic);\n      \n      //Put the Dice Quantities into a Span Property\n      const profdice = document.createElement('span');\n      const abilitydice = document.createElement('span');\n      profdice.dataset.genesys = diceprofIcon + prof;\n      abilitydice.dataset.genesys = diceabilityIcon + ability;\n\n      //Put the Span in an Array\n      let poolElement = document.createElement('span');\n      poolElement.appendChild(profdice);\n      poolElement.appendChild(abilitydice);\n      dicepoolArray[i] = poolElement;\n    }\n\n    // Repopulate outputElement with updated content\n    for (let x = 0; x < presentSkillsArray.length; x++) {\n      let stat = presentSkillsArray[x];\n      let label = presentLabelsArray[x];\n      let characteristic = presentCharacteristicsArray[x];\n\n      if (typeof stat !== \"undefined\" && (monster.type == \"Minion\" || monster.type == 'minion')) {\n        let skillElement = document.createElement('strong');\n        skillElement.textContent = label;\n        let diceElement = document.createElement('span');\n        diceElement = dicepoolArray[x];\n\n        let dicecontainerElement = document.createElement('div');\n        dicecontainerElement.id = \"div_dicecontainer\";\n        dicecontainerElement.appendChild(skillElement);\n        dicecontainerElement.appendChild(document.createTextNode(': '));\n        dicecontainerElement.appendChild(diceElement);\n        dicecontainerElement.appendChild(document.createElement('br'));\n\n        outputElement.appendChild(dicecontainerElement);\n    }\n  }\n}\n});\n\n//INCREMENT BUTTON\n  let incrementButton = document.createElement('button');\n  incrementButton.textContent = '+';\n  incrementButton.style.width = '15px'; // Set the width to 100 pixels\n  incrementButton.style.height = '15px'; // Set the height to 15 pixels\n  incrementButton.style.marginLeft = '3px'; // Add left margin to create space\n  incrementButton.style.lineHeight = '1'; //Center the +/- vertically.\n  incrementButton.style.borderRadius = '20%';\n  incrementButton.addEventListener('click', () => {\n    statValue++;\n    //Cap statValue at wounds threshhold\n    if (statValue > (monster[targetStat] * monster.qty)) {\n      statValue = (monster[targetStat] * monster.qty)\n    }\n    statElement.textContent = statValue;\n\n    if ((monster.type == \"Minion\" || monster.type == \"minion\") && names[targetStat] == \"Wounds\") {\n      // Clear the children of outputElement after \"rdefMdefContainer\"\n      let clearChildren = false;\n      let childrenToRemove = [];\n\n      Array.from(outputElement.children).forEach(child => {\n        if (clearChildren) {\n          childrenToRemove.push(child);\n        }\n        if (child.classList.contains('tapered-rule')) {\n          clearChildren = true;\n        }\n      });\n\n      childrenToRemove.forEach(child => {\n        child.remove();\n      });\n\n      // Recalculate Dice Pools\n      for (let i = 0; i < dicepoolArray.length; i++) {\n        let stat = Math.ceil(statValue / monster.wounds)-1;\n        // Cap Stat at 5\n        if ( stat > 5 ) {\n          stat = 5\n        }\n        let characteristic = presentCharacteristicsArray[i];\n        let ability = Math.max(stat, characteristic) - Math.min(stat, characteristic);\n        let prof = Math.min(stat, characteristic);\n        \n        //Put the Dice Quantities into a Span Property\n        const profdice = document.createElement('span');\n        const abilitydice = document.createElement('span');\n        profdice.dataset.genesys = diceprofIcon + prof;\n        abilitydice.dataset.genesys = diceabilityIcon + ability;\n\n        //Put the Span in an Array\n        let poolElement = document.createElement('span');\n        poolElement.appendChild(profdice);\n        poolElement.appendChild(abilitydice);\n        dicepoolArray[i] = poolElement;\n      }\n\n      // Repopulate outputElement with updated content\n      for (let x = 0; x < presentSkillsArray.length; x++) {\n        let stat = presentSkillsArray[x];\n        let label = presentLabelsArray[x];\n        let characteristic = presentCharacteristicsArray[x];\n\n        if (typeof stat !== \"undefined\" && (monster.type == \"Minion\" || monster.type == 'minion')) {\n          let skillElement = document.createElement('strong');\n          skillElement.textContent = label;\n          let diceElement = document.createElement('span');\n          diceElement = dicepoolArray[x];\n\n          let dicecontainerElement = document.createElement('div');\n          dicecontainerElement.id = \"div_dicecontainer\";\n          dicecontainerElement.appendChild(skillElement);\n          dicecontainerElement.appendChild(document.createTextNode(': '));\n          dicecontainerElement.appendChild(diceElement);\n          dicecontainerElement.appendChild(document.createElement('br'));\n\n          outputElement.appendChild(dicecontainerElement);\n        }\n      }\n    }\n  });\n\n  //MULTIPLE INCREMENT BUTTON\n  let incrementWholeButton = document.createElement('button');\n  incrementWholeButton.textContent = '+'+monster.wounds;\n  incrementWholeButton.style.width = '15px'; // Set the width to 100 pixels\n  incrementWholeButton.style.height = '15px'; // Set the height to 15 pixels\n  incrementWholeButton.style.marginLeft = '3px'; // Add left margin to create space\n  incrementWholeButton.style.marginRight = '3px'; // Add left margin to create space\n  incrementWholeButton.style.lineHeight = '1'; //Center the +/- vertically.\n  incrementWholeButton.style.borderRadius = '20%';\n  incrementWholeButton.addEventListener('click', () => {\n    \n    statValue = statValue+monster.wounds;\n    //Cap statValue at wounds threshhold\n    if (statValue > (monster[targetStat] * monster.qty)) {\n      statValue = (monster[targetStat] * monster.qty)\n    }\n    statElement.textContent = statValue;\n\n    if ((monster.type == \"Minion\" || monster.type == \"minion\") && names[targetStat] == \"Wounds\") {\n      // Clear the children of outputElement after \"rdefMdefContainer\"\n      let clearChildren = false;\n      let childrenToRemove = [];\n\n      Array.from(outputElement.children).forEach(child => {\n        if (clearChildren) {\n          childrenToRemove.push(child);\n        }\n        if (child.classList.contains('tapered-rule')) {\n          clearChildren = true;\n        }\n      });\n\n      childrenToRemove.forEach(child => {\n        child.remove();\n      });\n\n      // Recalculate Dice Pools\n      for (let i = 0; i < dicepoolArray.length; i++) {\n        let stat = Math.ceil(statValue / monster.wounds)-1;\n        // Cap Stat at 5\n        if ( stat > 5 ) {\n          stat = 5\n        }\n        let characteristic = presentCharacteristicsArray[i];\n        let ability = Math.max(stat, characteristic) - Math.min(stat, characteristic);\n        let prof = Math.min(stat, characteristic);\n        \n        //Put the Dice Quantities into a Span Property\n        const profdice = document.createElement('span');\n        const abilitydice = document.createElement('span');\n        profdice.dataset.genesys = diceprofIcon + prof;\n        abilitydice.dataset.genesys = diceabilityIcon + ability;\n\n        //Put the Span in an Array\n        let poolElement = document.createElement('span');\n        poolElement.appendChild(profdice);\n        poolElement.appendChild(abilitydice);\n        dicepoolArray[i] = poolElement;\n      }\n\n      // Repopulate outputElement with updated content\n      for (let x = 0; x < presentSkillsArray.length; x++) {\n        let stat = presentSkillsArray[x];\n        let label = presentLabelsArray[x];\n        let characteristic = presentCharacteristicsArray[x];\n\n        if (typeof stat !== \"undefined\" && (monster.type == \"Minion\" || monster.type == 'minion')) {\n          let skillElement = document.createElement('strong');\n          skillElement.textContent = label;\n          let diceElement = document.createElement('span');\n          diceElement = dicepoolArray[x];\n\n          let dicecontainerElement = document.createElement('div');\n          dicecontainerElement.id = \"div_dicecontainer\";\n          dicecontainerElement.appendChild(skillElement);\n          dicecontainerElement.appendChild(document.createTextNode(': '));\n          dicecontainerElement.appendChild(diceElement);\n          dicecontainerElement.appendChild(document.createElement('br'));\n\n          outputElement.appendChild(dicecontainerElement);\n        }\n      }\n    }\n  });\n\n//Build Individual Stat Rows\n  let statcontainerElement = document.createElement('div');\n  statcontainerElement.id = \"div_statcontainer\";\n  let buttoncontainerElement = document.createElement('div');\n  buttoncontainerElement.id = \"div_button\";\n  let decreaseButtons = document.createElement('div');\n  decreaseButtons.id = \"decreasebuttons\"\n  let increaseButtons = document.createElement('div');\n  increaseButtons.id = \"increasebuttons\"\n  \n  \n  statcontainerElement.appendChild(nameElement);\n  //statcontainerElement.appendChild(document.createTextNode(' '));\n  //statcontainerElement.appendChild(iconElement);\n  //statcontainerElement.appendChild(document.createTextNode(' : '));\n  if ((targetStat == \"wounds\" || targetStat == \"strain\") && (monster.type == \"Minion\" || monster.type == 'minion')) {\n    \n    decreaseButtons.appendChild(decrementWholeButton);\n    decreaseButtons.appendChild(decrementButton);\n    buttoncontainerElement.appendChild(decreaseButtons);\n\n  }\n  buttoncontainerElement.appendChild(statElement);\n  if ((targetStat == \"wounds\" || targetStat == \"strain\") && (monster.type == \"Minion\" || monster.type == 'minion')) {\n    increaseButtons.appendChild(incrementButton);\n    increaseButtons.appendChild(incrementWholeButton);\n    buttoncontainerElement.appendChild(increaseButtons);\n  }\n    statcontainerElement.appendChild(buttoncontainerElement);\n  /*\n  if (targetStat == \"rdef\" || targetStat == \"soak\" || (targetStat == \"wounds\" && monster.type !== \"Minion\" && monster.type !== 'minion' && monster.type !== \"Rival\" && monster.type !== \"rival\") ) {\n    //let separatorElement = document.createElement('strong');\n    //separatorElement.textContent = ' | ';\n    //statcontainerElement.appendChild(separatorElement);\n  }\n*/\n  //statcontainerElement.style.whiteSpace = 'pre'; // Apply CSS to preserve white spaces\n  //statcontainerElement.style.display = 'flex'; // Set display property to flex\n  //statcontainerElement.style.alignItems = 'center'; //Align all objects in div vertically center to the div\n\n  return statcontainerElement;\n};\n\n// Render Stats into div\n\nlet outputElement = document.createElement('div');\noutputElement.id = \"div_output\"\n\n/* OLD SCRIPT\n// Create a separate container for \"soak\" and \"wounds\" elements\nlet soakWoundsContainer = document.createElement('div');\nsoakWoundsContainer.id = \"div_soakWoundsContainer\"\nsoakWoundsContainer.style.display = 'flex'; // Set display property to flex\nsoakWoundsContainer.style.justifyContent = 'center';\nsoakWoundsContainer.appendChild(statWithIcon(\"soak\"));\nsoakWoundsContainer.appendChild(statWithIcon(\"wounds\"));\nif (monster.type !== \"undefined\" && (monster.type !== \"Minion\" && monster.type !== \"minion\" && monster.type !== \"Rival\" && monster.type !== \"rival\")) {\n  soakWoundsContainer.appendChild(statWithIcon(\"strain\"));\n}\noutputElement.appendChild(soakWoundsContainer);\n*/\n\n// Create a separate container for \"soak\" and \"wounds\" elements\nlet soakContainer = document.createElement('div');\nsoakContainer.id = \"div_soak\"\nlet woundsContainer = document.createElement('div');\nwoundsContainer.id = \"div_wounds\"\nlet strainContainer = document.createElement('div');\nstrainContainer.id = \"div_strain\"\nlet allStatsContainer = document.createElement('div');\nallStatsContainer.id = \"div_allstats\"\n\nsoakContainer.appendChild(statWithIcon(\"soak\"));\nwoundsContainer.appendChild(statWithIcon(\"wounds\"));\nif (monster.type !== \"undefined\" && (monster.type !== \"Minion\" && monster.type !== \"minion\" && monster.type !== \"Rival\" && monster.type !== \"rival\")) {\n  strainContainer.appendChild(statWithIcon(\"strain\"));\n}\n\nallStatsContainer.appendChild(soakContainer);\nallStatsContainer.appendChild(woundsContainer);\nallStatsContainer.appendChild(strainContainer);\n\n// Create a separate container for \"rdef\" and \"mdef\" elements\nlet rdefMdefContainer = document.createElement('div');\nrdefMdefContainer.id = \"div_rdefMdefContainer\"\n//rdefMdefContainer.style.display = 'flex'; // Set display property to flex\n//rdefMdefContainer.style.justifyContent = 'center';\nrdefMdefContainer.appendChild(statWithIcon(\"def\"));\n\nif (monster.rdef > 0 || monster.mdef > 0) {\n  allStatsContainer.appendChild(rdefMdefContainer);\n}\noutputElement.appendChild(allStatsContainer);\n\nlet lineElement = document.createElement('div');\nlineElement.id = \"div_line\"\nlineElement.classList.add('tapered-rule');\noutputElement.appendChild(lineElement);\n\n// Render Dice Pools per Skill - If monster type is minion, exclude Skill level\nfor (let x = 0; x < presentSkillsArray.length; x++) {\n  let stat = presentSkillsArray[x];\n  let label = presentLabelsArray[x];\n  if (typeof stat !== \"undefined\" ) { //&& (monster.type == \"Minion\" || monster.type == 'minion')\n    let statElement = document.createElement('span');\n    statElement.textContent = '('+stat+')';\n    statElement.style.marginRight = '5px'; \n    let skillElement = document.createElement('strong');\n    skillElement.textContent = label;\n    //skillElement.style.marginRight = '5px';\n    let diceElement = document.createElement('span');\n    diceElement = dicepoolArray[x];\n\n    let dicecontainerElement = document.createElement('div');\n    dicecontainerElement.id = \"div_dicecontainer\";\n    dicecontainerElement.appendChild(skillElement);\n    dicecontainerElement.appendChild(document.createTextNode(': '));\n\n    if (monster.type !== \"Minion\" && monster.type !== \"minion\") {\n      dicecontainerElement.appendChild(statElement);\n    }\n    dicecontainerElement.appendChild(diceElement);\n    dicecontainerElement.appendChild(document.createElement('br'));\n    outputElement.appendChild(dicecontainerElement);\n\n  }\n}\n\n//outputElement.style.width = '100%'\nreturn outputElement;\n"}],"hasRule":true},{"type":"traits","id":"8949daf9da88","properties":["equipment"],"fallback":"-","markdown":true,"hasRule":false,"heading":"Equipment"},{"type":"traits","id":"391babc9c9ca","properties":["talentranks"],"fallback":"-","hasRule":false,"heading":"Talent Ranks"},{"type":"traits","id":"c8ca58e88939","properties":["abilities"],"fallback":"-","conditioned":true,"heading":"Abilities","hasRule":false,"markdown":true,"subheadingText":""},{"type":"traits","id":"c9db0a6b7ba8","properties":["talents"],"fallback":"-","heading":"Talents","subheadingText":"","hasRule":true,"markdown":true,"conditioned":false,"headingProp":false}],"name":"Genesys","id":"2af8093adb4a","diceParsing":[],"columnWidth":325,"forceColumns":true,"cssProperties":{"traitsFontStyle":"small-caps","traitsFontWeight":"normal","traitsNameFontStyle":"normal"}}